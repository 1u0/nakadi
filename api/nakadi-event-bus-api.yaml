swagger: '2.0'
info:
  title: Nakadi Event Bus API Definition
  description: |
    -----------
    Definitions
    -----------
    Nakadi at its core aims at being a generic and content-agnostic event broker with a convenient API.
    In doing this, Nakadi abstracts away, as much as possible, details of the backing messaging
    infrastructure. The single currently supported messaging middleware is Kafka (Kinesis is planned
    for the future).

    In Nakadi every Event has an EventType, and a **stream** of Events is exposed for each registered
    EventType.

    An EventType defines properties relevant for the operation of its associated stream, namely:

    * The **schema** of the Event of this EventType (*TODO: define shcema*)

    * The expected **validation** and **enrichment** procedures upon reception of an Event.
      (*TODO: define validation and enrichment*)

    * The **ordering** expectations of Events in this stream. (*TODO: define ordering not in terms of
    partitioning*)

    Except for defined enrichment rules, Nakadi will never manipulate the content of any Event.

    Clients of Nakadi can be grouped in 2 categories: **Application owners** and **Clients** (clients in turn
    are both **Producers** and **Consumers** of Events). Application owners interact with Nakadi via the
    **Schema Registry API** for the definition of EventTypes, while Clients via the **Stream API** for
    submission and reception of Events. A low level **Topic API** is available, providing full control and
    responsibility of position tracking and partitioning (and therefore ordering) of to the Clients.

    The consumption of Events proceeds via the establishment of a named **Subscription** to an EventType.
    Subscriptions are persitent relationships from an Application (which might have several instances) and the
    stream of an EventType, whose consumption tracking is managed by Nakadi, freeing Consumers from any
    responsibility in tracking the current position on a Stream.



    Scope and status of this document
    -------------------------------

    The present API specification is in **draft** state and is subject to change.

    In this document, ready for review are included:
    * The Schema Registry API, including configuration possibilities for the Schema, Validation, Enrichment
    and Partitioning of Events, and their effects on reception of Events.

    * The Stantardised event format (see #/definitions/Event) (Note: at a later moment this will be
    configurable and not be inherent part of this API).

    * Topic API (low level).

    Other aspects of the Event Bus are at this moment to be defined and otherwise specificied, not included in
    this version of this specification.

    Notable omissions here are:
    * The contract between Nakadi and clients in the context of the high-level API.

    * Submission of events to topics in batched manner.

    * Validation and enrichment procedures.

    * The process for clients to establish subscriptions.


  version: '0.5'
  contact:
    name: Team Aruha @ Zalando
    email: team-aruha+nakadi-maintainers@zalando.de
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: 'https://auth.example.com/oauth2/tokeninfo'

paths:
  /metrics:
    get:
      tags:
        - monitoring
      summary: Get monitoring metrics
      responses:
        '200':
          description: Metrics data
          schema:
            $ref: '#/definitions/Metrics'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  /event-types:
    get:
      tags:
        - schema-registry-api
      description: Returns a list of all registered `EventType`s
      responses:
        '200':
          description: Metrics data
          schema:
            type: array
            items:
              $ref: '#/definitions/EventType'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'

    post:
      tags:
        - schema-registry-api
      description: |
        Creates a new `EventType`. Upon creation the name MUST be unique.

        **Implementation note:** The creation of an EventType implicitly creates the structures in the backing
        messaging implementation needed for the reception and persistency of the Events. Considering that at
        this time only Kafka is used, this corresponds to the creation of a Topic. If so desired, clients can
        interact directly with the topic using the low level API (for existing restrictions see the
        corresponding methods on the topic-api).

        The fields validation-strategies, enrichment-strategies and partition-resolution-strategy have all an
        effect on the incoming Event of this EventType. For its impacts on the reception of events please
        consult the Event submission API methods.

        * Validation strategies define an array of EventValidationStrategies to be evaluated on reception of
        an Event of this EventType.

        * TDB Enrichment strategy

        * TDB Partition resulution strategy

        Nakadi MIGHT impose necessary schema, validation and enrichment minimal configurations that MUST be
        followed by all EventTypes (examples include: validation rules to match the schema; enriching every
        Event with the reception date-type; adhering to a set of schema fields that are mandatory for all
        EventTypes). **The mechanism to set and inspect such rules is not defined at this time and might not
        be exposed in the API.**

      parameters:
        - name: event-type
          in: body
          description: EventType to be created
          schema:
            type: object
            $ref: '#/definitions/EventType'
          required: true
      responses:
        '200':
          description: Ok
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'


  /event-types/{name}:
    get:
      tags:
        - schema-registry-api
      description: |
        Returns the EventType identified by its name.
      parameters:
        - name: name
          in: path
          description: Name of the EventType to load.
          type: string
          required: true
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/EventType'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: EventType not found

    put:
      tags:
        - schema-registry-api
      description: |
        Updates the EventType identified by its name. Behaviour is the same as creation of EventType (POST
        /event-type) except where noted below.

        The name and the topic fields cannot be changed. Attempting to do so will result in a 422 failure.

        At this moment changes in the schema are not supported and will produce a 422 failure. (TODO: define
        conditions for backwards compatible extensions in the schema)
      parameters:
        - name: name
          in: path
          description: Name of the EventType to update.
          type: string
          required: true
        - name: event-type
          in: body
          description: EventType to be created
          schema:
            type: object
            $ref: '#/definitions/EventType'
          required: true

      responses:
        '200':
          description: Ok
        '401':
          description: User is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: EventType not found.
          schema:
              $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

  /topics:
    get:
      description: Lists all known `Topics` of this Nakadi cluster
      tags:
        - monitoring
        - management-api
      responses:
        '200':
          description: The request was successful. Returns a list `Topic`s in the response body.
          schema:
            type: array
            description: An array of topics
            items:
              $ref: '#/definitions/Topic'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'

  '/topics/{topic}/events':
    get:
      tags:
        - high-level-api
        - draft
      summary: |
        Starts a stream delivery for the specified partitions of the given topic.
        The tracking of the current position in the partitions and of which
        partitions is being read is in the responsibility of the client.
        No commits are needed.
      parameters:
        - name: topic
          in: path
          description: Topic where to get events from
          type: string
          required: true
        - name: x-nakadi-cursors
          in: header
          description: Cursors pointing to partitions/offsets to start read from
          required: false
          type: array
          items:
            type: string
            format: '#/definitions/Cursor'
        - name: batch_limit
          in: query
          description: |
            Maximum number of `Event`s in each chunk of the stream. If unspecified assumes default value 1
            (i.e. each event is individually submitted). This limit is applied per partition.
          type: integer
          format: int32
          required: false
          default: 1
        - name: stream_limit
          in: query
          description: |
            Maximum number of `Event`s in this stream. If 0 or undefined, will
            stream indefinately.

            Stream initialization will fail if `stream_limit` is lower than
            `batch_limit`.
          type: integer
          format: int32
          required: false
          default: 0
        - name: batch_flush_timeout
          in: query
          description: |
            Maximum time in seconds to wait for the flushing of each chunk; if the `batch_limit` is reached
            before this time is reached the messages are immediately flushed to the client.
          type: integer
          format: int32
          required: false
        - name: stream_timeout
          in: query
          description: |
            Maximum time in seconds a stream will live before being interrupted.
            If unspecified will stream indefinately.

            If this timeout is reached any pending messages (in the sense of
            `stream_limit`) will be flushed to the client.

            Stream initialization will fail if `stream_timeout` is lower than
            `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
        - name: batch_keep_alive_limit
          in: query
          description: |
            Maximum number of keep-alive messages to get in a row before closing the connection. Unlimited by
            default.
          type: integer
          format: int32
          required: false
      responses:
        '200':
          description: |
            Starts streaming to the client.
            Stream format is a continuous series of `EventStreamBatch`s separated by `\n`
          schema:
            $ref: '#/definitions/EventStreamBatch'
        '400':
          description: Bad syntax
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: |
            Not found. Typically in case of requesting from a non existing topic or partition. Details are
            provided on the returned `Problem`.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Internal Server Error. Details are provided on the returned `Problem`.
          schema:
            $ref: '#/definitions/Problem'
    post:
      tags:
        - high-level-api
        - draft
      description: |
        Post a one or more `Event`s to a given `Topic`.
        The partition is implicitly controlled by the `PartitionResolutionStrategy` set to the `EventType` of
        the Event that is being written.
      parameters:
        - name: topic
          in: path
          description: Topic name where to send events to
          type: string
          required: true
        - name: event
          in: body
          description: The body contains an array of events being sent.
          required: true
          schema:
            type: array
            description: An array of events to be pushed to Nakadi
            items:
              $ref: '#/definitions/Event'
        - name: Content-Encoding
          in: header
          required: false
          description: |
            Allow the publisher to gzip compress the payload by setting this header to "gzip".
            For Example "Content-Encoding: gzip"
          type: string
      responses:
        '201':
          description: All events are submitted successfully.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/partitions':
    get:
      tags:
        - monitoring
        - management-api
      summary: Lists the `Partition`s for the given topic
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            description: An array of `Partition`s
            items:
              $ref: '#/definitions/Partition'
  '/topics/{topic}/partitions/{partition}':
    get:
      tags:
        #- low-level-api
        - management-api
      summary: Returns the given `Partition` of this topic
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
        - name: partition
          in: path
          description: Partition id.
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Partition'
        '401':
          description: User is not authenticated
          schema:
            $ref: '#/definitions/Problem'

  '/topics/{topic}/partitions/{partition}/events':
    post:
      tags:
        - low-level-api
      summary: |
        Posts a batch of `Event`s to the specified partition of this topic.
        Note that this overwrites the evaluation of the partitioning_key.

        **To be defined:** Every `Event` submitted to a topic will have its content validated and enriched,
        respectively, by the `EventValidationStrategy` and the `EventEnrichmentStrategy` defined for this
        `Topic` (see POST /topics for details).
      parameters:
        - name: topic
          in: path
          description: Topic where to send events to.
          type: string
          required: true
        - name: partition
          in: path
          description: Partition where which the events are stored.
          type: string
          required: true
        - name: Content-Encoding
          in: header
          required: false
          description: |
            "Allow the publisher to gzip compress the payload by setting this header to "gzip". For Example
            "Content-Encoding: gzip"
          type: string
        - name: event
          in: body
          description: Array of `Event`s being sent.
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
      responses:
        '201':
          description: Event submitted.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
    get:
      tags:
        - low-level-api
      summary: |
        Starts a stream delivery for the specified partition of the given topic. The events are send in
        `EventStreamBatch`es.
        The tracking of the current position in the partition and of which partition is being read is in the
        responsibility of the client. No commits are needed.
      parameters:
        - name: topic
          in: path
          description: Topic to consume events from
          type: string
          required: true
        - name: partition
          in: path
          description: Id of the partition where to get events from
          type: string
          required: true
        - name: start_from
          in: query
          description: Starting offset of the stream. Must be in the range defined by the `Partition`.
          type: string
          required: true
        - name: batch_limit
          in: query
          description: Maximum number of `EventStreamBatch`s in each chunk of the stream. If unspecified assumes default value 1 (i.e. each event is individually submitted).
          type: integer
          format: int32
          required: false
          default: 1
        - name: stream_limit
          in: query
          description: |
            Maximum number of `Event`s in this stream. If 0 or undefined, will stream indefinately.
            Stream initialization will fail if `stream_limit` is lower than `batch_limit`.
          type: integer
          format: int32
          required: false
        - name: batch_flush_timeout
          in: query
          description: |
            Maximum time in seconds to wait for the flushing of each chunk; if the `batch_limit` is reached
            before this
            time is reached the messages are immediately flushed to the client.
            A value of 0 will flush every batch events immediatly as soon as they come in.
          type: integer
          format: int32
          required: false
        - name: stream_timeout
          in: query
          description: |
            Maximum time in seconds a stream will live before being interrupted. If unspecified will stream
            indefinately.
            If this timeout is reached any pending messages (in the sense of `stream_limit`) will be flushed
            to the
            client.
            Stream initialization will fail if `stream_timeout` is lower than `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
        - name: batch_keep_alive_limit
          in: query
          description: |
            Maximum number of keep-alive messages to get in a row
            before closing the connection.
            Unlimited by default.
          type: integer
          format: int32
          required: false
        - name: Accept-Encoding
          in: header
          required: false
          description: |
            "If set the client requests the body to be gzip compressed. For Example "Content-Encoding: gzip"
          type: string
      responses:
        '200':
          description: |
            Starts streaming to the client.
            Stream format is a continuous series of `EventStreamBatch`s separated by `\n`
          schema:
            $ref: '#/definitions/EventStreamBatch'
        '400':
          description: Bad syntax
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error. Details are given in the response body.
          schema:
            $ref: '#/definitions/Problem'


# ################################### #
#                                     #
#             Definitions             #
#                                     #
# ################################### #

definitions:
  Event:
    type: object
    description: |
      **To be changed**. This is the most general representation of an event, that can be processed
      by Nakadi.

      It should be used as a base definition for all events, that flow through
      Nakadi by extending attributes of this object type.
    properties:
      event_type:
        type: string
        example: 'https://resource-events.zalando.com/ResourceCreated'
      partitioning_key:
        type: string
        example: 'ABC123XXX-001'
      metadata:
        $ref: '#/definitions/EventMetaData'
  EventMetaData:
    type: object
    properties:
      id:
        type: string
        format: uuid
      created:
        type: string
        format: date-time
      root_id:
        type: string
        format: uuid
      parent_id:
        type: string
        format: uuid
      scopes:
        type: array
        items:
          type: string

  Problem:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced,
          it SHOULD provide human-readable API documentation for the problem type
          (e.g., using HTML).
        example: http://httpstatus.es/503
      title:
        type: string
        description: |
          A short, summary of the problem type. Written in english and readable
          for engineers (usually not suited for non technical stakeholders and
          not localized); example: Service Unavailable
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence
          of the problem.
        example: 503
      detail:
        type: string
        description: |
          A human readable explanation specific to this occurrence of the
          problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the specific occurrence of the problem.
          It may or may not yield further information if dereferenced.
    required:
      - type
      - title
      - status

  Metrics:
    type: object

  Topic:
    description: |
      Representation of the underlying (implementation dependent) event ordering and persistence structure.

      Direct operation on this is usually unnecessary.
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Topic name
        example: article.120
  Partition:
    required:
      - partition
      - oldest_available_offset
      - newest_available_offset
    properties:
      partition:
        type: string
      oldest_available_offset:
        type: string
      newest_available_offset:
        type: string
  Cursor:
    required:
      - partition
      - offset
    properties:
      partition:
        type: string
      offset:
        type: string
  EventStreamBatch:
    description: |
      One chunk of events in a stream. A batch consists of an array of `Event`s plus a `Cursor` pointing to
      the offset of the last Event in the stream.

      The size of the array of Event is limited by the parameters used to initialize a Stream.
    required:
      - cursor
    properties:
      cursor:
        $ref: '#/definitions/Cursor'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'

  EventType:
    description: An event type defines the schema and its runtime properties.
    properties:
      name:
        type: string
        description: Name of this EventType. The name for the EventType must follow the pattern
        'organization:team:application:event-type'
      topic:
        type: string
        description: |
          References the name of the low-level topic that is holding the stream of Events for this EventType.
          Usually is the same as the name property.
      validation-strategies:
        description: |
          Determines the validation that has to be executed upon reception of Events of this type. Events are
          rejected if any of the rules fail (see details of Problem response on the Event publishing methods).

          Rule evaluation order is the same as in this array.
        type: array
        items:
          $ref: '#/definitions/EventValidationStrategy'

      enrichment-strategies:
        description: |
          Determines the enrichment to be performed on an Event upon reception. Enrichment is performed once
          upon reception (and after validation) of an Event and is only possible on fields that are not
          defined on the incoming Event.

          See documentation for the write operation for details on behaviour in case of unsuccessful
          enrichment.
        type: array
        items:
          $ref: '#/definitions/EventEnrichmentStrategy'

      partition-resolution-strategy:
        description: |
          Determines how the assignment of the event to a Partition should be handled.

        type: object
        $ref: '#/definitions/PartitionResolutionStrategy'

      schema:
        type: object
        $ref: '#/definitions/EventTypeSchema'
        description: |
          The schema for this EventType. This is expected to be a json schema in yaml format (other formats
          might be added in the future).

  EventTypeSchema:
    properties:
      type:
        type: string
        example: 'json-schema'
      schema:
        type: string


  EventValidationStrategy:
    description: |
      Defines a rule for validation of an incoming Event.

      Rules might require additional parameters; see the `doc` field of the existing rules for details. See
      GET /registry/validation-rules for a list of available rules.
    properties:
      name:
        type: string
        description: Name of the strategy.
      doc:
        type: string
        description: Documentation for the validation.
    required:
      - name
      - doc


  PartitionResolutionStrategy:
    description: |
      Defines a rule for the resolution of incoming Events into partitions of a Topic.

      Rules might require additional parameters; see the `doc` field of the existing rules for details. See
      GET /registry/partition-rules for a list of available rules.
    properties:
      name:
        type: string
        description: Name of the strategy.
      doc:
        type: string
        description: Documentation for the partition resolution.
    required:
      - name
      - doc

  EventEnrichmentStrategy:
    description: |
      Defines a rule for transformation of an incoming Event. No existing fields might be modified. In
      practice this is used to set automatically values in the Event upon reception (i.e. set a reception
      timestamp on the Event).

      Rules might require additional parameters; see the `doc` field of the existing rules for details. See
      GET /registry/enrichment-rules for a list of available rules.
    properties:
      name:
        type: string
        description: Name of the strategy.
      doc:
        type: string
        description: Documentation for the enrichment.
    required:
      - name
      - doc
