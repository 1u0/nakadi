import java.util.concurrent.TimeUnit

subprojects {
    buildscript {
        ext {
            springBootVersion = '1.5.20.RELEASE'
        }
        repositories {
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    checkstyle {
        configFile = new File(rootDir, "checkstyle.xml")
        toolVersion = "7.6"
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
        testLogging.exceptionFormat = 'full'
        maxParallelForks = Runtime.runtime.availableProcessors()
    }

    task testWithReport() {
        dependsOn test
        finalizedBy jacocoTestReport
    }
    dependencies {
        ext {
            kafkaClientVersion = '2.3.1'
        }
    }
}

task testInitNakadi(type: Exec) {
    environment "SPRING_PROFILES_ACTIVE", "acceptanceTest"
    commandLine "bash", "-c", "docker-compose up -d --build"
    doLast {
        println "Waiting for Nakadi to start up"
        long start = System.currentTimeMillis()
        waitForNakadi()
        println "Nakadi is fully started in " + (System.currentTimeMillis() - start) + " ms"
    }
}

task initNakadi(type: Exec) {
    environment "SPRING_PROFILES_ACTIVE", "local"
    commandLine "bash", "-c", "docker-compose up -d --build"
    doLast {
        println "Waiting for Nakadi to start up"
        long start = System.currentTimeMillis()
        waitForNakadi()
        println "Nakadi is fully started in " + (System.currentTimeMillis() - start) + " ms"
    }
}

task startNakadi(type: GradleBuild) {
    tasks = ['clean', 'app:bootRepackage', 'initNakadi']
}

task startNakadiForTests(type: GradleBuild) {
    tasks = ['clean', 'app:bootRepackage', 'testInitNakadi']
}


task fullAcceptanceTest(type: GradleBuild) {
    tasks = ['startNakadiForTests', ':acceptance-test:acceptanceTest', 'stopNakadi']
}

task stopNakadi(type: Exec) {
    commandLine "bash", "-c", "docker-compose down"
}

def waitForNakadi() {
    // wait till application is up (health check is successful)
    int result = 1
    while (result != 0) {
        result = execAndWait('curl http://localhost:8080/health')
        sleep(1000L)
    }
}

def execAndWait(command, timeoutInSeconds = 15) {
    println "Running command: " + command
    ProcessBuilder pb = new ProcessBuilder(["bash", "-c", command]).inheritIO()
    Process proc = pb.start()
    proc.waitFor(timeoutInSeconds, TimeUnit.SECONDS)
    return proc.exitValue()
}

task startStorages(type: Exec) {
    commandLine "bash", "-c", "docker-compose up -d postgres zookeeper kafka"
}

task stopStorages(type: Exec) {
    commandLine "bash", "-c", "docker-compose down"
}

task checkstyle {
    subprojects.each { dependsOn(":${it.name}:checkstyleMain") }
    subprojects.each { dependsOn(":${it.name}:checkstyleTest") }
    dependsOn(":acceptance-test:checkstyleMain")
    dependsOn(":acceptance-test:checkstyleTest")
}

task test {
    subprojects.each { dependsOn(":${it.name}:testWithReport") }
}
