import java.util.concurrent.TimeUnit

buildscript {
    ext {
        springBootVersion = '1.5.20.RELEASE'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.yaml:snakeyaml:1.21'
        classpath 'org.owasp:dependency-check-gradle:3.3.2'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.owasp.dependencycheck'

group 'org.zalando'
sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'org.zalando.nakadi.Application'
springBoot {
    layout = "ZIP"
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

sourceSets {
    acceptanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('app/src/acceptance-test/java')
        }
        resources.srcDir file('app/src/acceptance-test/resources')
    }
}

jar {
    baseName = 'nakadi'
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
    dbMigrationCompile.extendsFrom compile
    dbMigrationRuntime.extendsFrom runtime
    pgsql
}

findbugs {
    reportLevel = "high"
    sourceSets = []
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task testInitNakadi(type: Exec) {
    environment "SPRING_PROFILES_ACTIVE", "acceptanceTest"
    commandLine "bash", "-c", "docker-compose up -d --build"
    doLast {
        println "Waiting for Nakadi to start up"
        long start = System.currentTimeMillis()
        waitForNakadi()
        println "Nakadi is fully started in " + (System.currentTimeMillis() - start) + " ms"
    }
}

task initNakadi(type: Exec) {
    environment "SPRING_PROFILES_ACTIVE", "local"
    commandLine "bash", "-c", "docker-compose up -d --build"
    doLast {
        println "Waiting for Nakadi to start up"
        long start = System.currentTimeMillis()
        waitForNakadi()
        println "Nakadi is fully started in " + (System.currentTimeMillis() - start) + " ms"
    }
}

task startNakadi(type: GradleBuild) {
    tasks = ['clean', 'bootRepackage', 'initNakadi']
}

task stopNakadi(type: Exec) {
    commandLine "bash", "-c", "docker-compose down"
}

def waitForNakadi() {
    // wait till application is up (health check is successful)
    int result = 1
    while (result != 0) {
        result = execAndWait('curl http://localhost:8080/health')
        sleep(1000L)
    }
}

def execAndWait(command, timeoutInSeconds = 15) {
    println "Running command: " + command
    ProcessBuilder pb = new ProcessBuilder(["bash", "-c", command]).inheritIO()
    Process proc = pb.start()
    proc.waitFor(timeoutInSeconds, TimeUnit.SECONDS)
    return proc.exitValue()
}

task startStorages(type: Exec) {
    commandLine "bash", "-c", "docker-compose up -d postgres zookeeper kafka"
}

task stopStorages(type: Exec) {
    commandLine "bash", "-c", "docker-compose down"
}

task fullTest(type: GradleBuild) {
    tasks = ['clean', 'bootRepackage', 'testInitNakadi', 'test', 'acceptanceTest']
    finalizedBy stopNakadi
}

task fullAcceptanceTest(type: GradleBuild) {
    tasks = ['clean', 'bootRepackage', 'testInitNakadi', 'acceptanceTest']
    finalizedBy stopNakadi
}

task acceptanceTest(type: Test) {
    testClassesDirs = sourceSets.acceptanceTest.output
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    maxParallelForks = 1
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.exceptionFormat = 'full'
    maxParallelForks = Runtime.runtime.availableProcessors()
}

acceptanceTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.exceptionFormat = 'full'
}

bootRun {
    addResources = false
    main = 'org.zalando.nakadi.Application'
    environment 'NAKADI_OAUTH2_MODE', 'OFF'
    environment 'NAKADI_FEATURETOGGLE_DEFAULT', 'true'
}

run {
}

jacoco {
  toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task testWithReport() {
    dependsOn test
    finalizedBy jacocoTestReport
}

checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
    toolVersion = "7.6"
}

task checkstyle {
    dependsOn checkstyleMain, checkstyleTest, checkstyleAcceptanceTest
}
