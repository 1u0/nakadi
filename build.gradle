import static groovy.io.FileType.FILES

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'spring-boot'
apply plugin: 'com.lv.dbdeploy'
apply plugin: 'scala'
apply plugin: 'docker'

mainClassName = 'de.zalando.aruha.nakadi.Application'
def dockerGroup = "aruha"
def dockerApplicationName = "nakadi"

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }

    acceptanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE"
        classpath "gradle.plugin.com.lv.plugins:gradle-dbdeploy-plugin:1.3"
        classpath "se.transmode.gradle:gradle-docker:1.2"
    }
}

jar {
    baseName = 'nakadi'
    version = '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web:1.2.5.RELEASE') {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    compile 'org.springframework:spring-context:4.2.0.RELEASE'
    compile 'org.springframework:spring-jdbc:4.2.0.RELEASE'
    compile 'redis.clients:jedis:2.1.0'
    compile 'org.scala-lang:scala-library:2.11.6'
    compile 'joda-time:joda-time:2.2'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'io.springfox:springfox-swagger2:2.2.2'
    compile 'io.springfox:springfox-swagger-ui:2.2.2'
    compile 'org.slf4j:slf4j-log4j12:1.7.12'

    testCompile 'org.scalatest:scalatest_2.11:2.2.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'com.jayway.restassured:rest-assured:2.5.0'
    testRuntime 'org.pegdown:pegdown:1.1.0'
}
// end::dependencies[]

// tag::wrapper[]
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

docker {
    baseImage "zalando/openjdk:8u66-b17-1-3"
    group = dockerGroup
    applicationName = dockerApplicationName
}


task startDockerContainer(type: Exec) {
    commandLine "bash", "-c", "docker run -p 8080:8080 -i -t -d \$(docker images | grep -m 1 \"^$dockerGroup/$dockerApplicationName\" | awk \'{print \$3}\')"
}

task stopDockerContainer(type: Exec) {
    commandLine "bash", "-c", "docker stop \$(docker ps | grep \$(docker images | grep -m 1 \"^$dockerGroup/$dockerApplicationName\" | awk '{print \$3}') | awk '{print \$1}')"
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task acceptanceTest(type: Test) {
    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

task waitForApplicationPort() {
}

task fullAcceptanceTest(type: GradleBuild) {
    dependsOn startDockerContainer, waitForApplicationPort
    tasks = ['acceptanceTest']
    finalizedBy stopDockerContainer
}

task bootstrapData << {
    //todo: run kafka docker with some topics
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

integrationTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

acceptanceTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task development << {
    bootRun.systemProperty 'spring.profiles.active', 'development'
}

bootRun {
    addResources = false
    main = 'de.zalando.aruha.nakadi.Application'
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
