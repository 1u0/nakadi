import java.util.concurrent.TimeUnit
import static groovy.io.FileType.FILES

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'spring-boot'
apply plugin: 'com.lv.dbdeploy'
// if this is applied, include scala dependencies (see below)
// apply plugin: 'scala'
apply plugin: 'docker'

mainClassName = 'de.zalando.aruha.nakadi.Application'
def dockerGroup = "aruha"
def dockerApplicationName = "nakadi"

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }

    acceptanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE"
        classpath "gradle.plugin.com.lv.plugins:gradle-dbdeploy-plugin:1.3"
        classpath "se.transmode.gradle:gradle-docker:1.2"
    }
}

jar {
    baseName = 'nakadi'
    version = '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web:1.2.5.RELEASE') {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    compile 'org.springframework:spring-context:4.2.0.RELEASE'
    compile 'org.springframework:spring-jdbc:4.2.0.RELEASE'
    compile 'org.springframework:spring-web:4.2.0.RELEASE'

    // oauth
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.8.RELEASE'
    compile ('org.springframework.boot:spring-boot-starter-security') {
        exclude module: "logback-classic"
    }
    compile 'org.zalando.stups:stups-spring-oauth2-server:1.0.0'

    compile 'redis.clients:jedis:2.1.0'
    compile 'org.scala-lang:scala-library:2.11.6'

    compile 'joda-time:joda-time:2.2'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'io.springfox:springfox-swagger2:2.2.2'
    compile 'io.springfox:springfox-swagger-ui:2.2.2'

    compile 'org.slf4j:slf4j-log4j12:1.7.12'
    compile 'io.dropwizard.metrics:metrics-core:3.1.0'
    compile 'com.ryantenney.metrics:metrics-spring:3.1.0'
    compile 'io.dropwizard.metrics:metrics-servlets:3.1.0'

    compile 'org.apache.kafka:kafka-clients:0.9.0.0'
    compile 'org.apache.kafka:kafka_2.11:0.9.0.0'
    compile 'org.apache.zookeeper:zookeeper:3.4.5'
    //compile 'redis.clients:jedis:2.1.0'

    // scala dependencies
    //compile 'org.scala-lang:scala-library:2.11.6'
    //testCompile 'org.scalatest:scalatest_2.11:2.2.4'

    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'com.jayway.restassured:rest-assured:2.5.0'
    testRuntime 'org.pegdown:pegdown:1.1.0'
}
// end::dependencies[]

// tag::wrapper[]
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

docker {
    baseImage "zalando/openjdk:8u66-b17-1-3"
    group = dockerGroup
    applicationName = dockerApplicationName
}

task buildDockerContainer {
    doLast {
        execAndWait("docker build -t aruha/nakadi .", 120)
    }
    outputs.upToDateWhen { false }
}

task startDockerContainer(type: Exec) {
    commandLine "bash", "-c", "docker run -e \"NAKADI_OAUTH2_ENABLED=false\" -p 8080:8080 -i -t -d \$(docker images | grep -m 1 \"^$dockerGroup/$dockerApplicationName\" | awk \'{print \$3}\')"
    dependsOn buildDockerContainer
}

task stopDockerContainer(type: Exec) {
    commandLine "bash", "-c", "docker stop \$(docker ps | grep \$(docker images | grep -m 1 \"^$dockerGroup/$dockerApplicationName\" | awk '{print \$3}') | awk '{print \$1}')"
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task acceptanceTest(type: Test) {
    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

def execAndWait(command, timeoutInSeconds = 15) {
    println "Running command: " + command
    ProcessBuilder pb = new ProcessBuilder(["bash", "-c", command]).inheritIO();
    Process proc = pb.start();
    proc.waitFor(timeoutInSeconds, TimeUnit.SECONDS);
    return proc.exitValue()
}

task stopKafkaInDocker {
    doLast {
        execAndWait("docker ps | grep 'local-kafka' | awk '{print \$1}' | xargs docker stop")
    }
    outputs.upToDateWhen { false }
}

task startKafkaInDocker (type: Exec) {
    workingDir 'local-kafka'
    commandLine 'make', 'run'
}

task startDockerContainerAndWait() {
    // start app with docker
    dependsOn startDockerContainer

    doLast {
        // wait till application is up (health check is successful)
        int result = 1
        while (result != 0) {
            result = execAndWait('curl http://localhost:8080/health')
            sleep(1000L)
        }
    }
    outputs.upToDateWhen { false }
}

task fullAcceptanceTest(type: GradleBuild) {
    dependsOn startKafkaInDocker, startDockerContainerAndWait
    tasks = ['acceptanceTest']
    finalizedBy stopKafkaInDocker, stopDockerContainer
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

integrationTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

acceptanceTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task development << {
    jvmArgs = ["-Dnakadi.config=envs/development.conf"]
    //bootRun.systemProperty 'nakadi.config', 'envs/development.conf'
}

bootRun {
    addResources = false
    main = 'de.zalando.aruha.nakadi.Application'
    environment 'NAKADI_OAUTH2_ENABLED', 'false'
    jvmArgs = ["-Dnakadi.config=file:///" + projectDir + "/envs/development.conf"]
}

run {
    jvmArgs = ["-Dnakadi.config=file:///" + projectDir + "/envs/development.conf"]
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
