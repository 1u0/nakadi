buildscript {
    ext {
        springBootVersion = '1.5.20.RELEASE'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.yaml:snakeyaml:1.21'
        classpath 'org.owasp:dependency-check-gradle:3.3.2'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.owasp.dependencycheck'

group 'org.zalando'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

sourceSets {
    acceptanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
    dbMigration {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/db-migration/java')
        }
    }
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
    dbMigrationCompile.extendsFrom compile
    dbMigrationRuntime.extendsFrom runtime
    pgsql
}

findbugs {
    reportLevel = "high"
    sourceSets = []
}

dependencies {
    ext {
        dropwizardVersion = '3.1.3'
        curatorVersion = '4.2.0'
        zookeeperVersion = '3.4.14'
        jacksonVersion = '2.9.8'
        springFrameworkVersion = '4.3.23.RELEASE'
    }
    // Override spring-boot BOM versions
    ext['json.version'] = '20180130'
    ext['json-path'] = '2.4.0'
    ext['jsonassert'] = '1.5.0'

    implementation project(':core-common')
    implementation project(':core-metastore')

    // spring
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile 'org.springframework.cloud:spring-cloud-starter-hystrix:1.4.5.RELEASE'
    compile "org.springframework.boot:spring-boot-starter-jetty"

    // oauth
    compile('org.springframework.security.oauth:spring-security-oauth2:2.3.5.RELEASE') {
        exclude module: 'spring-beans'
        exclude module: 'spring-core'
        exclude module: 'spring-context'
    }
    compile('org.springframework.boot:spring-boot-starter-security') {
        exclude module: "logback-classic"
    }

    compile 'org.zalando:nakadi-plugin-api:3.2.1'
    compile 'com.google.guava:guava:27.1-jre'
    compile 'org.apache.commons:commons-lang3:3.8.1'

    compile("com.fasterxml.jackson.datatype:jackson-datatype-json-org:$jacksonVersion") {
        exclude module: "json"
    }
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:$jacksonVersion"
    compile 'org.zalando:jackson-datatype-problem:0.22.0'
    compile 'org.zalando:problem:0.22.0'
    compile 'org.json:json:20180130'

    compile 'org.slf4j:slf4j-log4j12'

    // open tracing
    compile 'io.opentracing:opentracing-api:0.31.0'
    compile 'io.opentracing:opentracing-util:0.31.0'

    compile 'org.apache.kafka:kafka-clients:2.1.0'
    compile('org.apache.kafka:kafka_2.12:2.1.0') {
        exclude module: "zookeeper"
    }
    compile("org.apache.curator:curator-recipes:$curatorVersion") {
        exclude module: "zookeeper"
    }
    compile "org.apache.zookeeper:zookeeper:$zookeeperVersion"

    compile 'org.echocat.jomon:runtime:1.6.3'

    compile "io.dropwizard.metrics:metrics-core:$dropwizardVersion"
    compile "com.ryantenney.metrics:metrics-spring:$dropwizardVersion"
    compile "io.dropwizard.metrics:metrics-servlets:$dropwizardVersion"
    compile "io.dropwizard.metrics:metrics-jvm:$dropwizardVersion"

    compile "org.springframework.boot:spring-boot-starter-jdbc"
    compile 'org.postgresql:postgresql:42.2.5'

    compile('com.github.everit-org.json-schema:org.everit.json.schema:1.8.0') {
        exclude module: "json"
    }
    compile 'org.zalando:problem-spring-web:0.23.0'

    // tests
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile('org.junit.jupiter:junit-jupiter-api:5.5.2') {
        exclude module: "hamcrest-core"
    }
    testCompile "org.springframework:spring-test"
    testCompile 'org.springframework.boot:spring-boot-test'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile project(path: ':core-common', configuration: 'testOutput')
}
// end::dependencies[]

configurations {
    testOutput.extendsFrom(testCompile)
}

task jarTest(type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    classifier = 'test'
}

artifacts {
    testOutput jarTest
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task acceptanceTest(type: Test) {
    testClassesDirs = sourceSets.acceptanceTest.output
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    maxParallelForks = 1
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.exceptionFormat = 'full'
    maxParallelForks = Runtime.runtime.availableProcessors()
}

acceptanceTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.exceptionFormat = 'full'
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
    toolVersion = "7.6"
}

task checkstyle {
    dependsOn checkstyleMain, checkstyleTest, checkstyleAcceptanceTest
}
